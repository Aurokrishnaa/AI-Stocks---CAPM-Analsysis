### **ðŸ“Œ How to Pull AI Stock Data Using Python**

This guide explains how to **fetch historical stock prices** for **AI stocks (NVDA, GOOG, MSFT, META, AMD)** and compare them with the **S&P 500 (market benchmark)** using **Yahoo Finance (`yfinance`)**.

---

### **ðŸ›  Required Libraries**

Before running the code, install the required Python libraries:

```bash
pip install yfinance pandas
```

- **`yfinance`** â†’ Fetches stock data from Yahoo Finance.  
- **`pandas`** â†’ Handles data manipulation and storage.  
- **`datetime`** â†’ Manages date ranges for fetching stock data.  
- **`os`** â†’ Helps save the output file to the system.

---

### **ðŸ“ˆ Step 1: Define the Stocks & Date Range**

To analyze AI stock performance and compare it to the S&P 500, we first define the stock tickers and date range.

```python
import yfinance as yf
import pandas as pd
import os

# Define AI stock tickers + S&P 500
tickers = ["META", "GOOG", "NVDA", "AMD", "MSFT", "^GSPC"]

# Define a fixed date range (7 years of data)
start_date = "2017-01-01"
end_date = "2025-01-01"
```

This ensures we capture **long-term trends** and evaluate how AI stocks have performed over time relative to the market.

---

### **ðŸ“Š Step 2: Fetch Stock Data from Yahoo Finance**

Using `yfinance.download()`, we can retrieve the **Adjusted Close prices**, which reflect true stock value after splits and dividends.

```python
# Download adjusted close prices for the selected stocks
stock_data_ai = yf.download(tickers, start=start_date, end=end_date, auto_adjust=False)[["Adj Close"]]

# Rename columns: Remove "Adj Close" level and keep tickers
stock_data_ai.columns = stock_data_ai.columns.droplevel(0)

# Reset index for a clean format
stock_data_ai = stock_data_ai.reset_index()

# Show the first few rows
stock_data_ai.head()
```

âœ… **Why Adjusted Close?**  
This price reflects real **market movements** after accounting for corporate actions like **stock splits and dividends**, making it the best metric for historical comparisons.

---

### **ðŸ’¾ Step 3: Save the Data to a CSV File**

For easy access, we save the stock data as a **CSV file** in the systemâ€™s **Downloads folder**.

```python
# Define the Downloads folder path dynamically
downloads_folder = os.path.expanduser("~/Downloads/stock_data_ai.csv")

# Save the stock data as CSV
stock_data_ai.to_csv(downloads_folder, index=False)

print(f"âœ… File saved successfully at {downloads_folder}")
```

This allows you to **reopen, analyze, and visualize** the data later using tools like **Excel, Jupyter Notebook, or Python scripts**.

---

### **ðŸ”— What's Next?**

Now that we have the stock data, the next steps in financial analysis could be:

- **ðŸ“Š Beta Calculation** â†’ Measure how AI stocks move relative to the S&P 500.
- **ðŸ“ˆ CAPM Model** â†’ Compare expected vs. actual returns.
- **ðŸ“Š Sharpe Ratio** â†’ Assess risk-adjusted performance.
- **ðŸ“‰ Data Visualization** â†’ Use Matplotlib and Seaborn to analyze trends.

This guide helps set up a structured approach to **retrieving stock data and preparing it for deeper financial analysis**. ðŸš€ Let me know if you need further refinements!
